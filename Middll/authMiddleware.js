const jwt = require('jsonwebtoken');

const authMiddleware = (req, res, next) => {
    const authorizationHeader = req.header('Authorization');
    console.log("üõ† En-t√™te Authorization : ", authorizationHeader);

    // Si l'en-t√™te Authorization n'existe pas
    if (!authorizationHeader) {
        console.log("‚ùå Aucun en-t√™te Authorization trouv√© !");
        return res.status(401).json({ message: 'Acc√®s refus√©. Token manquant.' });
    }

    // Extraction du token apr√®s "Bearer "
    const token = authorizationHeader.replace('Bearer ', '');
    console.log("üöÄ Token apr√®s extraction : ", token);

    if (!token) {
        console.log("‚ùå Aucun token trouv√© apr√®s extraction !");
        return res.status(401).json({ message: 'Acc√®s refus√©. Token manquant.' });
    }

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        console.log("‚úÖ Token d√©cod√© avec succ√®s : ", decoded);
        req.user = decoded;
        next();
    } catch (err) {
        console.log("‚ùå Erreur de d√©codage du token :", err.message);
        return res.status(401).json({ message: 'Token invalide.' });
    }
};
const checkRole = (...roles)  =>  {
  return (req, res, next) => {
    // V√©rifie si l'utilisateur est authentifi√© et a un r√¥le autoris√©
    if (!req.user || !roles.includes(req.user.role)) {
      return res.status(403).json({ message: "Acc√®s refus√© : r√¥le insuffisant" });
    }
    next(); // OK, passe √† la suite
  };
};


module.exports = {  authMiddleware, checkRole };