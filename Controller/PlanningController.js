const Disponibilities = require("../Models/Disponibilities");
const RendezVous = require("../Models/RendezVous");
const Evenement = require("../Models/Evenemnts");
const Notification = require("../Models/Notification");
//********************* Gestion de  disponiblit√©s ******************* */

// ‚úÖ Ajouter une disponibilit√©
async function addDisponibilite(req, res) {
    try {
      const userId = req.user.id; // R√©cup√©r√© via le token d√©cod√©
      console.log(req.body);
      const disponibilite = new Disponibilities({
        id_psychologue: userId,
        date: req.body.date,
        heure_debut: req.body.heure_debut,
        heure_fin: req.body.heure_fin,
        statut: req.body.statut // "disponible", "occup√©", "absent"
      });
      await disponibilite.save();
      res.status(201).json({ message: "Disponibilit√© ajout√©e avec succ√®s", disponibilite });
    } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors de l'ajout de la disponibilit√©" });
    }
  }
  
  // ‚úÖ R√©cup√©rer toutes les disponibilit√©s
  async function getAllDisponibilites(req, res) {
    try {
      const disponibilites = await Disponibilities.find();
      res.status(200).json(disponibilites);
    } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des disponibilit√©s" });
    }
  }
  
  // ‚úÖ R√©cup√©rer une disponibilit√© par ID
  async function getDisponibiliteById(req, res) {
    try {
      const disponibilite = await Disponibilities.findById(req.params.id);
      res.status(200).json(disponibilite);
    } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors de la r√©cup√©ration de la disponibilit√©" });
    }
  }
  
  // ‚úÖ R√©cup√©rer les disponibilit√©s d‚Äôun psychologue sp√©cifique
  async function getDisponibilitesByPsychologue(req, res) {
    try {
      const disponibilites = await Disponibilities.find({ id_psychologue: req.params.id_psychologue });
      res.status(200).json(disponibilites);
    } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des disponibilit√©s du psychologue" });
    }
  }
  
  // ‚úÖ Modifier une disponibilit√©
  async function updateDisponibilite(req, res) {
    try {
      const disponibilite = await Disponibilities.findByIdAndUpdate(req.params.id, req.body, {
        new: true,
      });
  
      res.status(200).json({ message: "Disponibilit√© mise √† jour", disponibilite });
    } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors de la mise √† jour de la disponibilit√©" });
    }
  }
  
  // ‚úÖ Supprimer une disponibilit√©
  async function deleteDisponibilite(req, res) {
    try {
      const disponibilite = await Disponibilities.findByIdAndDelete(req.params.id);
      res.status(200).json({ message: "Disponibilit√© supprim√©e", disponibilite });
    } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors de la suppression de la disponibilit√©" });
    }
  }
  
  // ‚úÖ R√©cup√©rer les disponibilit√©s par statut (disponible, occup√©, absent)
  async function getDisponibilitesByStatut(req, res) {
    try {
      const disponibilites = await Disponibilities.find({ statut: req.params.statut });
      res.status(200).json(disponibilites);
    } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors du filtrage des disponibilit√©s" });
    }
  }

//********************* Gestion de rendezvous ******************* */

// ‚úÖ Ajouter un rendez-vous (avec v√©rification des disponibilit√©s + notification)
async function addRendezVous(req, res) {
  try {
    const userId = req.user.id; // R√©cup√©r√© via le token d√©cod√©

    console.log(req.body);

    // üîé V√©rifier la disponibilit√© du psychologue
    const disponibilite = await Disponibilities.findOne({
      id_psychologue: req.body.id_psychologue,
      date: req.body.date,
      heure_debut: { $lte: req.body.heure },
      heure_fin: { $gte: req.body.heure },
      statut: "disponible"
    });

    if (!disponibilite) {
      return res.status(400).json({
        message: "Le psychologue n'est pas disponible √† ce cr√©neau."
      });
    }

    // üìù Cr√©er le rendez-vous
    const rendezVous = new RendezVous({
      id_psychologue: req.body.id_psychologue,
      id_patient: userId,
      date: req.body.date,
      heure: req.body.heure,
      motif: req.body.motif,
      statut: "en attente"
    });

    await rendezVous.save();

    // ‚úÖ Mettre √† jour la disponibilit√© comme "occup√©"
    await Disponibilities.findByIdAndUpdate(disponibilite._id, { statut: "occup√©" });

    // üîî Cr√©er la notification pour le patient
    // Construire une date ISO correcte √† partir de `rendezVous.date` et `rendezVous.heure`
    const date = new Date(rendezVous.date);
    const [hours, minutes] = rendezVous.heure.split(':');
    date.setHours(parseInt(hours));
    date.setMinutes(parseInt(minutes));
    date.setSeconds(0);

    // Format d'affichage (fran√ßais, exemple : "jeudi 20 mars 2025 √† 11:00")
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const dateStr = date.toLocaleDateString('fr-FR', options);
    const heureStr = `${hours}:${minutes}`;


    // Construire la date de rappel 1h avant
    const dateRappelMoins1h = new Date(date.getTime() - 60 * 60 * 1000);
    const message = `Votre rendez-vous avec le psychologue est pr√©vu le ${dateStr} √† ${heureStr}.`;

    const notification = new Notification({
      id_patient: rendezVous.id_patient,
      type: "rendezvous",
      id_cible: rendezVous._id,
      message,
      date_rappel: dateRappelMoins1h,
      lu: false,
      envoye: false

    });

    await notification.save();

    // ‚úÖ R√©ponse finale
    res.status(201).json({
      message: "Rendez-vous ajout√© avec succ√®s",
      rendezVous
    });

  } catch (err) {
    console.error(err);
    res.status(500).json({
      message: "Erreur lors de l'ajout du rendez-vous"
    });
  }
}

// ‚úÖ R√©cup√©rer tous les rendez-vous
async function getAllRendezVous(req, res) {
    try {
        const rendezVous = await RendezVous.find();
        res.status(200).json(rendezVous);
    } catch (err) {
        console.log(err);
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des rendez-vous" });
    }
}

// ‚úÖ R√©cup√©rer un rendez-vous par ID
async function getRendezVousById(req, res) {
    try {
        const rendezVous = await RendezVous.findById(req.params.id);
        res.status(200).json(rendezVous);
    } catch (err) {
        console.log(err);
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration du rendez-vous" });
    }
}

// ‚úÖ R√©cup√©rer les rendez-vous d‚Äôun psychologue sp√©cifique
async function getRendezVousByPsychologue(req, res) {
    try {
        const rendezVous = await RendezVous.find({ id_psychologue: req.params.id_psychologue });
        res.status(200).json(rendezVous);
    } catch (err) {
        console.log(err);
        res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des rendez-vous du psychologue" });
    }
}

// ‚úÖ Modifier un rendez-vous (par exemple, reprogrammer ou changer le statut)
async function updateRendezVous(req, res) {
    try {
        const rendezVous = await RendezVous.findByIdAndUpdate(req.params.id, req.body, { new: true });
        res.status(200).json({ message: "Rendez-vous mis √† jour", rendezVous });
    } catch (err) {
        console.log(err);
        res.status(500).json({ message: "Erreur lors de la mise √† jour du rendez-vous" });
    }
}

// ‚úÖ Annuler un rendez-vous
async function deleteRendezVous(req, res) {
    try {
        const rendezVous = await RendezVous.findByIdAndDelete(req.params.id);

        if (rendezVous) {
            // Rendre la disponibilit√© √† nouveau "disponible"
            await Disponibilities.findOneAndUpdate(
                { id_psychologue: rendezVous.id_psychologue, date: rendezVous.date },
                { statut: "disponible" }
            );
        }

        res.status(200).json({ message: "Rendez-vous annul√©", rendezVous });
    } catch (err) {
        console.log(err);
        res.status(500).json({ message: "Erreur lors de l'annulation du rendez-vous" });
    }
}

// ‚úÖ R√©cup√©rer les rendez-vous par statut (en attente, confirm√©, annul√©)
async function getRendezVousByStatut(req, res) {
    try {
        const rendezVous = await RendezVous.find({ statut: req.params.statut });
        res.status(200).json(rendezVous);
    } catch (err) {
        console.log(err);
        res.status(500).json({ message: "Erreur lors du filtrage des rendez-vous" });
    }
}

//********************* Gestion des evenements ******************* */

// ‚úÖ Ajouter un √©v√©nement
async function addEvenement(req, res) {
  try {
    
      console.log(req.body);

      const nouvelEvenement = new Evenement({
          titre: req.body.titre,
          description: req.body.description,
          date: req.body.date,
          heure_debut: req.body.heure_debut,
          duree: req.body.duree,
          capacite: req.body.capacite,
          participants: [] // <- ajout√© par s√©curit√©

      });

      await nouvelEvenement.save();
      res.status(201).json({ message: "√âv√©nement ajout√© avec succ√®s", evenement: nouvelEvenement });

  } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors de l'ajout de l'√©v√©nement" });
  }
}

// ‚úÖ R√©cup√©rer tous les √©v√©nements
async function getAllEvenements(req, res) {
  try {
      const evenements = await Evenement.find();
      res.status(200).json(evenements);
  } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des √©v√©nements" });
  }
}


// ‚úÖ R√©cup√©rer tous les √©v√©nements
async function getAllEvenements(req, res) {
  try {
      const evenements = await Evenement.find();
      res.status(200).json(evenements);
  } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des √©v√©nements" });
  }
}

// ‚úÖ R√©cup√©rer un √©v√©nement par ID
async function getEvenementById(req, res) {
  try {
      const evenement = await Evenement.findById(req.params.id);
      res.status(200).json(evenement);
  } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors de la r√©cup√©ration de l'√©v√©nement" });
  }
}

// ‚úÖ Modifier un √©v√©nement
async function updateEvenement(req, res) {
  try {
      const evenement = await Evenement.findByIdAndUpdate(req.params.id, req.body, { new: true });
      res.status(200).json({ message: "√âv√©nement mis √† jour", evenement });
  } catch (err) {
      console.log(err);
      res.status(500).json({ message: "Erreur lors de la mise √† jour de l'√©v√©nement" });
  }
}

// ‚úÖ Supprimer un √©v√©nement (et toutes les inscriptions associ√©es)
async function deleteEvenement(req, res) {
  try {
    await Evenement.findByIdAndDelete(req.params.id);
    res.status(200).json({ message: "√âv√©nement supprim√© avec succ√®s" });
  } catch (err) {
    console.log(err);
    res.status(500).json({ message: "Erreur lors de la suppression de l'√©v√©nement" });
  }
}


// ‚úÖ Inscrire un patient √† un √©v√©nement (avec notification)
async function inscrireEvenement(req, res) {
  try {
        const userId = req.user.id; // R√©cup√©r√© via le token d√©cod√©

    const { id_evenement } = req.body;

    const evenement = await Evenement.findById(id_evenement);
    if (!evenement) {
      return res.status(404).json({ message: "√âv√©nement introuvable" });
    }

    // üîÅ V√©rifier si d√©j√† inscrit
    const dejaInscrit = evenement.participants.some(p => p.id_participant.toString() === userId);
    if (dejaInscrit) {
      return res.status(400).json({ message: "Le patient est d√©j√† inscrit" });
    }

    // üßÆ V√©rifier la capacit√©
    if (evenement.participants.length >= evenement.capacite) {
      return res.status(400).json({ message: "Capacit√© maximale atteinte" });
    }

    // ‚ûï Ajouter l'inscription
    evenement.participants.push({ id_participant: userId });
    await evenement.save();

    // üîî Cr√©er la notification pour le patient
    // Construire une date ISO correcte √† partir de `evenement.date` et `evenement.heure_debut`
    const date = new Date(evenement.date);
    const [hours, minutes] = evenement.heure_debut.split(':');
    date.setHours(parseInt(hours));
    date.setMinutes(parseInt(minutes));
    date.setSeconds(0);

    // Format d'affichage (fran√ßais, exemple : "jeudi 20 mars 2025 √† 11:00")
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const dateStr = date.toLocaleDateString('fr-FR', options);
    const heureStr = `${hours}:${minutes}`;


    // Construire la date de rappel 1h avant
    const dateRappelMoins1h = new Date(date.getTime() - 60 * 60 * 1000);
    const message = `Vous √™tes inscrit √† l'√©v√©nement "${evenement.titre}" pr√©vu le ${dateStr} √† ${heureStr}.`;
    const notification = new Notification({
      id_patient: userId,
      type: "evenement",
      id_cible: evenement._id,
      message,
      date_rappel: dateRappelMoins1h,
      lu: false,
      envoye: false
    });

    await notification.save();

    // ‚úÖ Retour au client
    res.status(201).json({ message: "Inscription r√©ussie", evenement });

  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur lors de l'inscription √† l'√©v√©nement" });
  }
}



// ‚úÖ R√©cup√©rer les inscriptions d'un √©v√©nement
async function getInscriptionsByEvenement(req, res) {
  try {
    const evenement = await Evenement.findById(req.params.id_evenement);
    if (!evenement) {
      return res.status(404).json({ message: "√âv√©nement introuvable" });
    }

    res.status(200).json(evenement.participants);
  } catch (err) {
    console.log(err);
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des participants" });
  }
}


// ‚úÖ Annuler une inscription √† un √©v√©nement
async function annulerInscription(req, res) {
  try {
    const { id_evenement, id_patient } = req.params;

    const evenement = await Evenement.findById(id_evenement);
    if (!evenement) {
      return res.status(404).json({ message: "√âv√©nement introuvable" });
    }

    // Filtrer les participants
    const updatedParticipants = evenement.participants.filter(p => p.id_patient !== parseInt(id_patient));
    evenement.participants = updatedParticipants;
    await evenement.save();

    res.status(200).json({ message: "Inscription annul√©e avec succ√®s" });
  } catch (err) {
    console.log(err);
    res.status(500).json({ message: "Erreur lors de l'annulation de l'inscription" });
  }
}

//********************* Gestion des notification ******************* */


// ‚úÖ R√©cup√©rer toutes les notifications d‚Äôun patient
async function getNotificationsByPatient(req, res) {
  try {
    const { id_patient } = req.params;

    const notifications = await Notification.find({ id_patient })
      .sort({ date_rappel: -1 }); // Les plus r√©centes en premier

    res.status(200).json({ notifications });

  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur lors de la r√©cup√©ration des notifications" });
  }
}
// ‚úÖ Marquer comme lue
async function markNotificationAsRead(req, res) {
  try {
    const { id } = req.params;

    const notification = await Notification.findByIdAndUpdate(
      id,
      { lu: true },
      { new: true }
    );

    if (!notification) {
      return res.status(404).json({ message: "Notification introuvable" });
    }

    res.status(200).json({ message: "Notification marqu√©e comme lue", notification });

  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Erreur lors de la mise √† jour de la notification" });
  }
}



  module.exports = {
    addDisponibilite,
    getAllDisponibilites,
    getDisponibiliteById,
    getDisponibilitesByPsychologue,
    updateDisponibilite,
    deleteDisponibilite,
    getDisponibilitesByStatut,
    addRendezVous,
    getAllRendezVous,
    getRendezVousById,
    getRendezVousByPsychologue,
    updateRendezVous,
    deleteRendezVous,
    getRendezVousByStatut,
    addEvenement,
    getAllEvenements,
    getEvenementById,
    updateEvenement,
    deleteEvenement,
    inscrireEvenement,
    getInscriptionsByEvenement,
    annulerInscription,
    getNotificationsByPatient, 
    markNotificationAsRead
  };